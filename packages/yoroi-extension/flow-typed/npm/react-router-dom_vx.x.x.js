// flow-typed signature: 44110e4f6a37d4657d62b7d357d1d25d
// flow-typed version: <<STUB>>/react-router-dom_v6.23.0/flow_v0.142.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'react-router-dom'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'react-router-dom' {
  

import * as React from 'react';
import type {
            FutureConfig,Location,NavigateOptions,RelativeRoutingType,RouteObject,RouterProviderProps,To
            } from 'react-router';
import type {
            unstable_DataStrategyFunction,unstable_DataStrategyFunctionArgs,unstable_DataStrategyMatch,Fetcher,FormEncType,FormMethod,FutureConfig as RouterFutureConfig,GetScrollRestorationKeyFunction,History,HTMLFormMethod,HydrationState,Router as RemixRouter,V7_FormMethod,BlockerFunction
            } from '@remix-run/router';
import {
            UNSAFE_ErrorResponseImpl as ErrorResponseImpl
            } from '@remix-run/router';
import type {
            SubmitOptions,ParamKeyValuePair,URLSearchParamsInit,SubmitTarget
            } from './dom';
import {
            createSearchParams
            } from './dom';
export type {
          unstable_DataStrategyFunction,unstable_DataStrategyFunctionArgs,unstable_DataStrategyMatch,FormEncType,FormMethod,GetScrollRestorationKeyFunction,ParamKeyValuePair,SubmitOptions,URLSearchParamsInit,V7_FormMethod
        }
declare export {
          createSearchParams,ErrorResponseImpl as UNSAFE_ErrorResponseImpl
        }
export type {
          ActionFunction,ActionFunctionArgs,AwaitProps,Blocker,BlockerFunction,DataRouteMatch,DataRouteObject,ErrorResponse,Fetcher,FutureConfig,Hash,IndexRouteObject,IndexRouteProps,JsonFunction,LazyRouteFunction,LayoutRouteProps,LoaderFunction,LoaderFunctionArgs,Location,MemoryRouterProps,NavigateFunction,NavigateOptions,NavigateProps,Navigation,Navigator,NonIndexRouteObject,OutletProps,Params,ParamParseKey,Path,PathMatch,Pathname,PathParam,PathPattern,PathRouteProps,RedirectFunction,RelativeRoutingType,RouteMatch,RouteObject,RouteProps,RouterProps,RouterProviderProps,RoutesProps,Search,ShouldRevalidateFunction,ShouldRevalidateFunctionArgs,To,UIMatch,unstable_HandlerResult
        }from 'react-router';
declare export {
          AbortedDeferredError,Await,MemoryRouter,Navigate,NavigationType,Outlet,Route,Router,Routes,createMemoryRouter,createPath,createRoutesFromChildren,createRoutesFromElements,defer,isRouteErrorResponse,generatePath,json,matchPath,matchRoutes,parsePath,redirect,redirectDocument,renderMatches,resolvePath,useActionData,useAsyncError,useAsyncValue,useBlocker,useHref,useInRouterContext,useLoaderData,useLocation,useMatch,useMatches,useNavigate,useNavigation,useNavigationType,useOutlet,useOutletContext,useParams,useResolvedPath,useRevalidator,useRouteError,useRouteLoaderData,useRoutes
        }from 'react-router';
declare export {
          UNSAFE_DataRouterContext,UNSAFE_DataRouterStateContext,UNSAFE_NavigationContext,UNSAFE_LocationContext,UNSAFE_RouteContext,UNSAFE_useRouteId
        }from 'react-router';

    declare module 'global' {
      declare var __staticRouterHydrationData: HydrationState | void;
	declare var __reactRouterVersion: string;
	declare interface Document {
startViewTransition(cb: () => Promise<void> | void): ViewTransition,
} 
    }
    
declare interface DOMRouterOpts {
basename?: string,
future?: $Rest<$Diff<RouterFutureConfig,{ "v7_prependBasename": any}>, {...}>,
hydrationData?: HydrationState,
unstable_dataStrategy?: unstable_DataStrategyFunction,
window?: Window,
} declare export function createBrowserRouter(routes: RouteObject[], opts?: DOMRouterOpts): RemixRouter
declare export function createHashRouter(routes: RouteObject[], opts?: DOMRouterOpts): RemixRouter
declare type ViewTransitionContextObject = {
isTransitioning: false,...
} | {
isTransitioning: true,
flushSync: boolean,
currentLocation: Location,
nextLocation: Location,...
};declare var ViewTransitionContext: React.Context<ViewTransitionContextObject>;declare export {
          ViewTransitionContext as UNSAFE_ViewTransitionContext
        }
declare type FetchersContextObject = Map<string, any>;declare var FetchersContext: React.Context<FetchersContextObject>;declare export {
          FetchersContext as UNSAFE_FetchersContext
        }
declare interface ViewTransition {
finished: Promise<void>,
ready: Promise<void>,
updateCallbackDone: Promise<void>,
skipTransition(): void,
} 
/**
 * Given a Remix Router instance, render the appropriate UI
 */
declare export function RouterProvider(x: RouterProviderProps): React.Element<>
export interface BrowserRouterProps {
basename?: string,
children?: React.Node,
future?: $Rest<FutureConfig, {...}>,
window?: Window,
} 
/**
 * A `<Router>` for use in web browsers. Provides the cleanest URLs.
 */
declare export function BrowserRouter(x: BrowserRouterProps): React.JSX.Element
export interface HashRouterProps {
basename?: string,
children?: React.Node,
future?: $Rest<FutureConfig, {...}>,
window?: Window,
} 
/**
 * A `<Router>` for use in web browsers. Stores the location in the hash
 * portion of the URL so it is not sent to the server.
 */
declare export function HashRouter(x: HashRouterProps): React.JSX.Element
export interface HistoryRouterProps {
basename?: string,
children?: React.Node,
future?: FutureConfig,
history: History,
} 
/**
 * A `<Router>` that accepts a pre-instantiated history object. It's important
 * to note that using your own history object is highly discouraged and may add
 * two versions of the history library to your bundles unless you use the same
 * version of the history library that React Router uses internally.
 */
declare var HistoryRouter: typeof npm$namespace$HistoryRouter;

      declare var npm$namespace$HistoryRouter: {|
        (x: HistoryRouterProps): React.JSX.Element,
displayName: typeof HistoryRouter$displayName,
      |}
declare var HistoryRouter$displayName: string;declare export {
          HistoryRouter as unstable_HistoryRouter
        }
export type LinkProps = {
reloadDocument?: boolean,
replace?: boolean,
state?: any,
preventScrollReset?: boolean,
relative?: RelativeRoutingType,
to: To,
unstable_viewTransition?: boolean,...
} & $Diff<React.AnchorHTMLAttributes<HTMLAnchorElement>,{ "href": any}>

/**
 * The public API for rendering a history-aware `<a>`.
 */
declare export var Link: React.ForwardRefExoticComponent<{ ...LinkProps,...React.RefAttributes<HTMLAnchorElement> }>;declare type NavLinkRenderProps = {
isActive: boolean,
isPending: boolean,
isTransitioning: boolean,...
};export type NavLinkProps = {
children?: React.Node | ((props: NavLinkRenderProps) => React.Node),
caseSensitive?: boolean,
className?: string | ((props: NavLinkRenderProps) => string | void),
end?: boolean,
style?: React.CSSProperties | ((props: NavLinkRenderProps) => React.CSSProperties | void),...
} & $Diff<LinkProps,{ "className": any,
"style": any,
"children": any,
}>

/**
 * A `<Link>` wrapper that knows if it's "active" or not.
 */
declare export var NavLink: React.ForwardRefExoticComponent<{ ...NavLinkProps,...React.RefAttributes<HTMLAnchorElement> }>;export type FetcherFormProps = {

/**
 * The HTTP verb to use when the form is submit. Supports "get", "post",
 * "put", "delete", "patch".
 */
method?: HTMLFormMethod,

/**
 * `<form encType>` - enhancing beyond the normal string type and limiting
 * to the built-in browser supported values
 */
encType?: "application/x-www-form-urlencoded" | "multipart/form-data" | "text/plain",

/**
 * Normal `<form action>` but supports React Router's relative paths.
 */
action?: string,

/**
 * Determines whether the form action is relative to the route hierarchy or
 * the pathname.  Use this if you want to opt out of navigating the route
 * hierarchy and want to instead route based on /-delimited URL segments
 */
relative?: RelativeRoutingType,

/**
 * Prevent the scroll position from resetting to the top of the viewport on
 * completion of the navigation when using the <ScrollRestoration> component
 */
preventScrollReset?: boolean,

/**
 * A function to call when the form is submitted. If you call
 * `event.preventDefault()` then this form will not do anything.
 */
onSubmit?: React.FormEventHandler<HTMLFormElement>,...
} & React.FormHTMLAttributes<HTMLFormElement>
export type FormProps = {

/**
 * Indicate a specific fetcherKey to use when using navigate=false
 */
fetcherKey?: string,

/**
 * navigate=false will use a fetcher instead of a navigation
 */
navigate?: boolean,

/**
 * Forces a full document navigation instead of a fetch.
 */
reloadDocument?: boolean,

/**
 * Replaces the current entry in the browser history stack when the form
 * navigates. Use this if you don't want the user to be able to click "back"
 * to the page with the form on it.
 */
replace?: boolean,

/**
 * State object to add to the history stack entry for this navigation
 */
state?: any,

/**
 * Enable view transitions on this Form navigation
 */
unstable_viewTransition?: boolean,...
} & FetcherFormProps

/**
 * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except
 * that the interaction with the server is with `fetch` instead of new document
 * requests, allowing components to add nicer UX to the page as the form is
 * submitted and returns with data.
 */
declare export var Form: React.ForwardRefExoticComponent<{ ...FormProps,...React.RefAttributes<HTMLFormElement> }>;export interface ScrollRestorationProps {
getKey?: GetScrollRestorationKeyFunction,
storageKey?: string,
} 
/**
 * This component will emulate the browser's scroll restoration on location
 * changes.
 */
declare var ScrollRestoration: typeof npm$namespace$ScrollRestoration;

      declare var npm$namespace$ScrollRestoration: {|
        (x: ScrollRestorationProps): null,
displayName: typeof ScrollRestoration$displayName,
      |}
declare var ScrollRestoration$displayName: string;
/**
 * Handles the click behavior for router `<Link>` components. This is useful if
 * you need to create custom `<Link>` components with the same click behavior we
 * use in our exported `<Link>`.
 */
declare export function useLinkClickHandler<E: Element>(
to: To,
x?: {
target?: React.HTMLAttributeAnchorTarget,
replace?: boolean,
state?: any,
preventScrollReset?: boolean,
relative?: RelativeRoutingType,
unstable_viewTransition?: boolean,...
}): (event: React.MouseEvent<E, MouseEvent>) => void

/**
 * A convenient wrapper for reading and writing search parameters via the
 * URLSearchParams interface.
 */
declare export function useSearchParams(defaultInit?: URLSearchParamsInit): [URLSearchParams, SetURLSearchParams]
export type SetURLSearchParams = (
nextInit?: URLSearchParamsInit | ((prev: URLSearchParams) => URLSearchParamsInit),
navigateOpts?: NavigateOptions) => void;
/**
 * Submits a HTML `<form>` to the server without reloading the page.
 */
export interface SubmitFunction {
(target: SubmitTarget, options?: SubmitOptions): void,
} 
/**
 * Submits a fetcher `<form>` to the server without reloading the page.
 */
export interface FetcherSubmitFunction {
(target: SubmitTarget, options?: $Diff<SubmitOptions,{ "replace": any,
"state": any,
}>): void,
} 
/**
 * Returns a function that may be used to programmatically submit a form (or
 * some arbitrary data) to the server.
 */
declare export function useSubmit(): SubmitFunction
declare export function useFormAction(action?: string, x?: {
relative?: RelativeRoutingType,...
}): string
export type FetcherWithComponents<TData> = { ...Fetcher<TData>,...{
Form: React.ForwardRefExoticComponent<{ ...FetcherFormProps,...React.RefAttributes<HTMLFormElement> }>,
submit: FetcherSubmitFunction,
load: (href: string, opts?: {
unstable_flushSync?: boolean,...
}) => void,...
} };
/**
 * Interacts with route loaders and actions without causing a navigation. Great
 * for any interaction that stays on the same page.
 */
declare export function useFetcher<TData>(x?: {
key?: string,...
}): FetcherWithComponents<TData>

/**
 * Provides all fetchers currently on the page. Useful for layouts and parent
 * routes that need to provide pending/optimistic UI regarding the fetch.
 */
declare export function useFetchers(): ({ ...Fetcher,...{
key: string,...
} })[]

/**
 * When rendered inside a RouterProvider, will restore scroll positions on navigations
 */
declare function useScrollRestoration(
x?: {
getKey?: GetScrollRestorationKeyFunction,
storageKey?: string,...
}): void
declare export {
          useScrollRestoration as UNSAFE_useScrollRestoration
        }

/**
 * Setup a callback to be fired on the window's `beforeunload` event. This is
 * useful for saving some data to `window.localStorage` just before the page
 * refreshes.
 * 
 * Note: The `callback` argument should be a function created with
 * `React.useCallback()`.
 */
declare export function useBeforeUnload(
callback: (event: BeforeUnloadEvent) => any,
options?: {
capture?: boolean,...
}): void

/**
 * Wrapper around useBlocker to show a window.confirm prompt to users instead
 * of building a custom UI with useBlocker.
 * 
 * Warning: This has *a lot of rough edges* and behaves very differently (and
 * very incorrectly in some cases) across browsers if user click addition
 * back/forward navigations while the confirm is open.  Use at your own risk.
 */
declare function usePrompt(x: {
when: boolean | BlockerFunction,
message: string,...
}): void
declare export {
          usePrompt as unstable_usePrompt
        }

/**
 * Return a boolean indicating if there is an active view transition to the
 * given href.  You can use this value to render CSS classes or viewTransitionName
 * styles onto your elements
 * @param href The destination href
 * @param [opts.relative] Relative routing type ("route" | "path")
 */
declare function useViewTransitionState(to: To, opts?: {
relative?: RelativeRoutingType,...
}): boolean
declare export {
          useViewTransitionState as unstable_useViewTransitionState
        }

}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module 'react-router-dom/dist' {
  declare module.exports: any;
}

declare module 'react-router-dom/dist/main' {
  declare module.exports: any;
}

declare module 'react-router-dom/dist/react-router-dom.development' {
  declare module.exports: any;
}

declare module 'react-router-dom/dist/react-router-dom.production.min' {
  declare module.exports: any;
}

declare module 'react-router-dom/dist/server' {
  declare module.exports: any;
}

declare module 'react-router-dom/dist/umd/react-router-dom.development' {
  declare module.exports: any;
}

declare module 'react-router-dom/dist/umd/react-router-dom.production.min' {
  declare module.exports: any;
}

declare module 'react-router-dom/server' {
  declare module.exports: any;
}

// Filename aliases
declare module 'react-router-dom/dist/index' {
  declare module.exports: $Exports<'react-router-dom/dist'>;
}
declare module 'react-router-dom/dist/index.js' {
  declare module.exports: $Exports<'react-router-dom/dist'>;
}
declare module 'react-router-dom/dist/main.js' {
  declare module.exports: $Exports<'react-router-dom/dist/main'>;
}
declare module 'react-router-dom/dist/react-router-dom.development.js' {
  declare module.exports: $Exports<'react-router-dom/dist/react-router-dom.development'>;
}
declare module 'react-router-dom/dist/react-router-dom.production.min.js' {
  declare module.exports: $Exports<'react-router-dom/dist/react-router-dom.production.min'>;
}
declare module 'react-router-dom/dist/server.js' {
  declare module.exports: $Exports<'react-router-dom/dist/server'>;
}
declare module 'react-router-dom/dist/umd/react-router-dom.development.js' {
  declare module.exports: $Exports<'react-router-dom/dist/umd/react-router-dom.development'>;
}
declare module 'react-router-dom/dist/umd/react-router-dom.production.min.js' {
  declare module.exports: $Exports<'react-router-dom/dist/umd/react-router-dom.production.min'>;
}
declare module 'react-router-dom/server.js' {
  declare module.exports: $Exports<'react-router-dom/server'>;
}
