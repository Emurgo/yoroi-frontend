// @flow

// Handle restoring wallets that follow the v2 addressing scheme (bip44)

import {
  discoverAllAddressesFrom
} from './lib/adaAddressProcessing';
import {
  saveAsAdaAddresses,
  newAdaAddress
} from './adaAddress';
import type {
  AdaWallet,
  AdaWalletParams
} from './adaTypes';
import {
  Logger,
  stringifyError
} from '../../utils/logging';
import { saveCryptoAccount, saveAdaWallet } from './adaLocalStorage';
import { createAdaWallet } from './adaWallet';
import { createCryptoAccount } from './adaAccount';
import type { ConfigType } from '../../../config/config-types';

declare var CONFIG: ConfigType;
const addressScanSize = CONFIG.app.addressScanSize;
const addressRequestSize = CONFIG.app.addressRequestSize;

/** Restore all addresses and caches the results locally
 * Note: addresses may be skipped if generated by a wallet that doesn't follow bip44
 */
export async function restoreAdaWallet(
  { walletPassword, walletInitData }: AdaWalletParams
): Promise<AdaWallet> {
  try {
    // recover master key
    const [adaWallet, masterKey] = createAdaWallet({ walletPassword, walletInitData });
    const cryptoAccount = createCryptoAccount(masterKey, walletPassword);
    await restoreTransactionsAndSave(cryptoAccount, adaWallet, masterKey);
    return adaWallet;
  } catch (error) {
    Logger.error('restoreAdaWallet::restoreAdaWallet error: ' +
      stringifyError(error));
    throw error;
  }
}

/** Restore transactions and Save wallet + masterKey + cryptoAccount to localstorage */
export async function restoreTransactionsAndSave(cryptoAccount: CryptoAccount,
  adaWallet: AdaWallet,
  masterKey?: string): Promise<void> {
  // fetch all addresses
  const externalAddressesToSave =
    await discoverAllAddressesFrom(cryptoAccount, 'External', -1, addressScanSize, addressRequestSize);
  const internalAddressesToSave =
    await discoverAllAddressesFrom(cryptoAccount, 'Internal', -1, addressScanSize, addressRequestSize);
  // Save all addresses in local DB
  if (externalAddressesToSave.length !== 0 || internalAddressesToSave.length !== 0) {
    await Promise.all([
      saveAsAdaAddresses(cryptoAccount, externalAddressesToSave, 'External'),
      saveAsAdaAddresses(cryptoAccount, internalAddressesToSave, 'Internal')
    ]);
  } else {
    await newAdaAddress(cryptoAccount, 'External');
  }

  // save wallet info in localstorage
  saveCryptoAccount(cryptoAccount);
  saveAdaWallet(adaWallet, masterKey);
}
